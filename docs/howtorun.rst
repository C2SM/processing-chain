.. _howtorun-section:

How to Run
==========

The Python file ``run_chain.py`` in the root directory is the main script of the
Processing Chain.
It reads the user's input from the command line and from the ``config.yaml`` file of the
respective case.
Then it will start the Processing Chain.

Starting the Chain
------------------

The chain has to be run with the following command::

    $ ./run_chain.py <casename>

Here, ``<casename>`` is the name of a directory in the ``cases/``-directory where
there is a ``config.yaml``-file specifying the configuration, as well as templates
for the necessary namelist files for **int2lm**, **COSMO** or **ICON**. It may also
contain additional runscripts to be submitted via ``sbatch``.

Without specifiying a job list, the default joblist defined in
``config/models.yaml`` will be executed.

There are several optional arguments available to change the behavior of the chain:

* ``-h``, ``--help``
  	Show a help message and exit.
* ``-j [JOB_LIST ...]``, ``--jobs [JOB_LIST ...]``
    List of job names to be executed.
    A job is a .py-file in jobs/ with a ``main()`` function, which
    handles one aspect of the Processing Chain, for
    example copying ``meteo`` input data or launching a
    job for ``int2lm``. Jobs are executed in the order
    in which they are given here. If no jobs are
    given, default jobs will be executedas defined
    in config/models.yaml.
* ``-f``, ``--force``
    Force the processing chain to redo all specified
    jobs, even if they have been started already or
    were finished previously. WARNING: Only logfiles
    get deleted, other effects of a given job
    (copied files etc.) are simply overwritten. This
    may cause errors.
* ``-t NTRY``, ``--try NTRY``
	Amount of time the cosmo job is re-tried before crashing. Default is 1.
* ``-r``, ``--resume`` 
    Resume the processing chain by restarting the
    last unfinished job. WARNING: Only the logfile
    gets deleted, other effects of a given job
    (copied files etc.) are simply overwritten. This
    may cause errors.

What it Does
------------

The script ``run_chain.py`` reads the command line arguments and the config file.
It then calls the function :func:`run_chain.restart_runs`, which divides the
simulation time according to the specified restart steps. Then it calls
:func:`run_chain.run_chain` for each sub-run. This function sets up the directory
structure of the chain and then starts the specified :ref:`jobs<jobs-section>`
sequentially.

Test Cases
----------

The following test cases are available:

* ``cosmo-ghg-spinup-test``
* ``cosmo-ghg-test``
* ``icon-test``
* ``icon-art-oem-test``
* ``icon-art-global-test``

To be able to run these test cases, it is necessary to provide the input data,
to setup spack and to compile the models and tools. All this is automized via
the script::

	$ ./jenkins/scripts/jenkins.sh

This will run all the individual scripts in ``jenkins/scripts/``, which 
can also be launched separately if desired.

Directory Structure
-------------------

The directory structure generated by the Processing Chain for a ``cosmo-ghg``
run looks like this:::

	cfg.work_root/cfg.casename/
	└── cfg.chain_root/
	    ├── checkpoints/
	    │   ├── cfg.log_working_dir/
	    │   ├── cfg.log_finished_dir/
	    ├── cfg.cosmo_base/
	    │   ├── cfg.cosmo_work/
	    │   ├── cfg.cosmo_output/
	    │   ├── cfg.cosmo_restart_out/
	    ├── cfg.int2lm_base/
	        ├── cfg.int2lm_input/
	        ├── cfg.int2lm_work/
	        └── cfg.int2lm_output/
                   
Running the ``cosmo-ghg-test`` case therefore produces the following
directories and files (showing four levels of directories deep):::

	work/cosmo-ghg-test
	├── 2015010100_2015010106/
	│   ├── checkpoints/
	│   │   ├── finished/
	│   │   │   ├── biofluxes
	│   │   │   ├── cosmo
	│   │   │   ├── emissions
	│   │   │   ├── int2lm
	│   │   │   ├── oem
	│   │   │   ├── online_vprm
	│   │   │   ├── post_cosmo
	│   │   │   ├── post_int2lm
	│   │   │   └── prepare_data
	│   │   └── working/
	│   │       ├── biofluxes
	│   │       ├── cosmo
	│   │       ├── emissions
	│   │       ├── int2lm
	│   │       ├── oem
	│   │       ├── online_vprm
	│   │       ├── post_cosmo
	│   │       ├── post_int2lm
	│   │       └── prepare_data
	│   ├── cosmo/
	│   │   ├── input/
	│   │   │   ├── oem/
	│   │   │   └── vprm/
	│   │   ├── output/
	│   │   │   └── lffd*.nc
	│   │   ├── restart/
	│   │   │   └── lrff00060000o.nc
	│   │   └── run/
	│   │       ├── cosmo-ghg
	│   │       ├── INPUT_*
	│   │       ├── post_cosmo.job
	│   │       ├── run.job
	│   │       └── YU*
	│   └── int2lm/
	│       ├── input/
	│       │   ├── emissions
	│       │   ├── extpar
	│       │   ├── icbc
	│       │   ├── meteo
	│       │   └── vprm
	│       ├── output/
	│       │   ├── laf*.nc
	│       │   └── lbfd*.nc
	│       └── run/
	│           ├── INPUT
	│           ├── INPUT_ART
	│           ├── int2lm
	│           ├── OUTPUT
	│           ├── run.job
	│           └── YU*
	└── 2015010106_2015010112/
		├── checkpoints/
		│   ├── finished/
		│   │   ├── biofluxes
		│   │   ├── cosmo
		│   │   ├── emissions
		│   │   ├── int2lm
		│   │   ├── oem
		│   │   ├── online_vprm
		│   │   ├── post_cosmo
		│   │   ├── post_int2lm
		│   │   └── prepare_data
		│   └── working/
		│       ├── biofluxes
		│       ├── cosmo
		│       ├── emissions
		│       ├── int2lm
		│       ├── oem
		│       ├── online_vprm
		│       ├── post_cosmo
		│       ├── post_int2lm
		│       └── prepare_data
		├── cosmo/
		│   ├── input/
		│   │   ├── oem
		│   │   └── vprm
		│   ├── output/
		│   │   └── lffd*.nc
		│   ├── restart/
		│   │   └── lrff00060000o.nc
		│   └── run/
		│       ├── cosmo-ghg
		│       ├── INPUT_*
		│       ├── post_cosmo.job
		│       ├── run.job
		│       └── YU*
		└── int2lm/
			├── input/
			│   ├── emissions
			│   ├── extpar
			│   ├── icbc
			│   ├── meteo
			│   └── vprm
			├── output/
			│   ├── laf*.nc
			│   └── lbfd*.nc
			└── run/
				├── INPUT
				├── INPUT_ART
				├── int2lm
				├── OUTPUT
				├── run.job
				└── YU*

-------------------------------------------

.. autofunction:: run_chain.run_chain

-------------------------------------------	

.. autofunction:: run_chain.restart_runs
