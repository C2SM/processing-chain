.. _script-section:

Script
======

``run_chain.py``  is the main script of the processing chain.
It reads the user's input from the command line and from the ``config.py`` file.
Then it will start the processing chain.

Starting the chain
------------------

After loading the required modules (:ref:`requirements-section`), run the chain
with the following command: ::

    $ python run_chain.py <casename> <startdate> <hstart> <hstop> -j [jobs]

``<casename>`` is the name of a directory in the ``cases/``-directory where
there is a ``config.py``-file specifying the configurations, as well as templates
for the necessary **int2lm** and **COSMO** namelist-files.

If you don't supply a joblist, the default joblist will be executed; ``meteo``
``icbc`` ``emissions`` ``biofluxes`` ``int2lm`` ``post_int2lm cosmo``
``post_cosmo``.

To run the **COSMO** example case, run::

    $ python run_chain.py example 2015-01-01 0 24 -j meteo icbc emissions biofluxes int2lm post_int2lm cosmo post_cosmo

To run the **COSMOART** example case, run::

    $ python run_chain.py example_cosmoart 2015-02-04 0 24 -j emissions ifs_hres_bc photo_rate obs_nudging icbc int2lm cosmo

        
What it does
------------

The script ``run_chain.py`` reads the command-line arguments and the config-file.
It then calls the function :func:`run_chain.restart_runs` which divides the
simuation time according to the specified restart steps. Then it calls
:func:`run_chain.run_chain` for each sub-run. This function sets up the directory
structure of the chain and then starts the specified :ref:`jobs-section`
sequentially.

The directory structure generated by the processing-chain looks like this:::

  cfg.work_root/
    + output/cfg.output_root/
    \ <casename>/cfg.chain_root/
                   + cfg.int2lm_base/
		   |   + cfg.int2lm_input/
		   |   + cfg.int2lm_work/
		   |   \ cfg.int2lm_output/
		   + cfg.cosmo_base/
		   |   + cfg.cosmo_work/
		   |   + cfg.cosmo_output/
		   |   \ cfg.cosmo_restart_out/
		   \ checkpoints/
		       + cfg.log_working_dir/
		       \ cfg.log_finished_dir/
                   
Running the ``example``-case therefore produces the following directories:::

  $SCRATCH/processing_chain/
             + output/example
	     \ example/2015010100_0_24/
	                 + int2lm/
			 |   + input/
			 |   |  + emissions/
			 |   |  + extpart/
			 |   |  + icbc/
			 |   |  + meteo/
			 |   |  \ vprm/
			 |   + run/
			 |   |  + int2lm   # executable
			 |   |  + INPUT
			 |   |  \ run.job
			 |   \ output/
			 + cosmo/
			 |   + run/
			 |   |  + cosmo    # executable
			 |   |  + INPUT_*
			 |   |  \ run.job
			 |   + output/
			 |   \ restart/
			 \ checkpoints
			     + working/    # 1 logfile per started job
			     \ finished    # 1 logfile per finished job


Functions in ``run_chain.py``
-----------------------------

.. autofunction:: run_chain.restart_runs

.. autofunction:: run_chain.run_chain

.. autofunction:: run_chain.load_config_file

.. autofunction:: run_chain.set_simulation_type

.. autofunction:: run_chain.parse_arguments
