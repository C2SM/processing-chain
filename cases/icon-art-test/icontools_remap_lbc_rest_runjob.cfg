#!/usr/bin/env bash
#SBATCH --account=em05
#SBATCH --partition=debug
#SBATCH --constraint=mc
#SBATCH --nodes=1
#SBATCH --time=0:30:00
#SBATCH --ntasks-per-core=1
#SBATCH --ntasks-per-node=36
#SBATCH --cpus-per-task=1
#SBATCH --output=lbc.out

# Export some variables
export OMP_SCHEDULE="static"
export OMP_DYNAMIC="false"
export OMP_NUM_THREADS=2
export RLIMIT_CORE=0

export ECCODES_DEFINITION_PATH=/users/msteiner/eccodes_definitions/definitions.edzw-2.12.5-2:/store/empa/em05/easybuild/software/ecCodes/2.12.5-CrayGNU-19.10/share/eccodes/definitions
export GRIB_DEFINITION_PATH=/users/jenkins/install/libgrib_api/v1.20.0.2/cray/cosmo_definitions/:/users/jenkins/install/libgrib_api/v1.20.0.2/cray/share/grib_api/definitions:$GRIB_DEFINITION_PATH


WORKDIR=${SCRATCH}/ARTcases4C2SM
myoutdir=${WORKDIR}/input/icbc

ulimit -s unlimited

# SETTINGS: DIRECTORIES AND INPUT/OUTPUT FILE NAMES --------------------------

# directory containing DWD icon tools binaries
export ICONTOOLS_DIR=/users/msteiner/dwd_icon_tools_old/icontools

# file name of limited-area (target) grid
export LOCALGRID=${WORKDIR}/input/grids/VERIFY_DOM_DOM01.nc

# directory and filename of boundary file
export DATADIR=/store/empa/em05/dbrunner/icon-art/meteo

# file name of input grid, for IFS this is the boundary data file
export INGRID=${DATADIR}/ifs_2018010100.grb

# directory where auxgrid will be
export AUXDIR=${WORKDIR}/input/icbc

# directory containing data files which shall be mapped to limited-area grid
DATAFILELIST=$(find ${DATADIR}/ifs_20180101* ! -name "*00.grb")

# output directory for extracted boundary data
export OUTDIR=$myoutdir

#-----------------------------------------------------------------------------

BINARY_ICONSUB=iconsub
BINARY_REMAP=iconremap
MPIEXE=" srun -n 1"

# grid file defining the lateral boundary
AUXGRID="lateral_boundary"

#-----------------------------------------------------------------------------
# PART I: Create auxiliary grid file which contains only the cells of the 
#         boundary zone.
#-----------------------------------------------------------------------------

mkdir -p ${OUTDIR}
cd ${OUTDIR}
echo "This is where we are running the job ...."
pwd

cat > NAMELIST_ICONSUB_$date << EOF_1
&iconsub_nml
  grid_filename    = '${LOCALGRID}',
  output_type      = 4,
  lwrite_grid      = .TRUE.,
/
&subarea_nml
  ORDER            = "${AUXDIRDIR}/${AUXGRID}",
  grf_info_file    = '${LOCALGRID}',
  min_refin_c_ctrl = 1
  max_refin_c_ctrl = 14
/
EOF_1

#${MPIEXE}  ${ICONTOOLS_DIR}/${BINARY_ICONSUB} \
#               --nml NAMELIST_ICONSUB_$date 2>&1

#-----------------------------------------------------------------------------
# PART II: Extract boundary data
#-----------------------------------------------------------------------------

rm -f ncstorage.tmp_lbc_${date}*

set +x
cat > NAMELIST_ICONREMAP_FIELDS_$date << EOF
!
&input_field_nml  ! temperature
 inputname      = "T"
 outputname     = "T"
 code           = 130
 intp_method = 3
/
&input_field_nml  ! horiz. wind comp. u
 inputname      = "U" , "V"
 outputname     = "VN"
/
&input_field_nml  ! vertical velocity
 inputname      = "W"
 outputname     = "W"
 code           = 135
 intp_method = 3
/
&input_field_nml  ! surface pressure
 inputname      = "LNSP"
 outputname     = "LNPS" 
 code           = 152
 intp_method = 3
/
!&input_field_nml  ! geopotential
! inputname      = "Z"
! outputname     = "GEOSP"
! code           = 129
! intp_method = 3
!/
&input_field_nml  ! geopotential
 inputname      = "FI"
 outputname     = "GEOP_ML" 
 code           = 129
 intp_method = 3
 loptional      = .TRUE.
/
&input_field_nml  ! specific humidity
 inputname      = "Q"
 outputname     = "QV"
 code           = 133
 intp_method = 3
/
&input_field_nml  ! cloud liquid water content
 inputname      = "CLWC"
 outputname     = "QC"
 code           = 246
 intp_method = 3
/
&input_field_nml  ! cloud ice water content
 inputname      = "CIWC"
 outputname     = "QI"
 code           = 247
 intp_method = 3
/
&input_field_nml  ! rain water content
 inputname      = "CRWC"
 outputname     = "QR"
 code           = 75 
 intp_method = 3
/
&input_field_nml  ! snow water content
 inputname      = "CSWC"
 outputname     = "QS" 
 code           = 76
 intp_method = 3
/
EOF

#-----------------------------------------------------------------------------
# loop over file list:

echo "DATAFILELIST is ${DATAFILELIST}"
for datafilename in ${DATAFILELIST} ; do

	datafile="${datafilename##*/}"  # get filename without path
	outdatafile=${datafile%.*}      # get filename without suffix

	cat > NAMELIST_ICONREMAP_lbc_$date << EOF_2C
&remap_nml
 in_grid_filename  = '${INGRID}'
 in_filename       = '${DATADIR}/${datafile}'
 in_type           = 1
 out_grid_filename = '${AUXDIR}/${AUXGRID}.grid.nc'
 out_filename      = '${OUTDIR}/${outdatafile}_lbc.nc'
 out_type          = 2
 out_filetype      = 4
 l_have3dbuffer    = .false.
! ncstorage_file    = "ncstorage.tmp_lbc_${date}"
/
EOF_2C

${MPIEXE} ${ICONTOOLS_DIR}/${BINARY_REMAP} -q \
            --remap_nml NAMELIST_ICONREMAP_lbc_$date                           \
            --input_field_nml NAMELIST_ICONREMAP_FIELDS_$date 2>&1

done

#-----------------------------------------------------------------------------
# clean-up

#rm -f ncstorage.tmp_lbc_${date}*
rm -f nml.log  
rm -f NAMELIST_ICONSUB_$date NAMELIST_ICONREMAP_lbc_$date NAMELIST_ICONREMAP_FIELDS_$date

#-----------------------------------------------------------------------------
exit
#-----------------------------------------------------------------------------

