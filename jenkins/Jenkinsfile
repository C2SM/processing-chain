def BuildBadge = addEmbeddableBadgeConfiguration(id: "build", subject: "Build")
def TestBadge = addEmbeddableBadgeConfiguration(id: "test", subject: "Test")

pipeline {
    environment {
       EMAIL_TO_1 = 'michael.jaehn@c2sm.ethz.ch'
    }
    agent {
        node {
            label 'daint'
        }
    }
    stages {
        stage('Setup') {
            parallel {
                stage('setup miniconda') {
                    environment {
                        PATH = "${WORKSPACE}/miniconda/bin:$PATH"
                    }
                    steps {
                        script {
                            BuildBadge.setStatus('running')
                        }
                        sh 'wget -O ${WORKSPACE}/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'
                        sh 'rm -fr $WORKSPACE/miniconda'
                        sh 'bash miniconda.sh -b -p $WORKSPACE/miniconda'
                        sh 'conda config --set always_yes yes --set changeps1 no'
                        sh 'conda config --add channels conda-forge'
                        sh 'conda env create -f env/environment.yml'
                        sh '''source ${WORKSPACE}/miniconda/etc/profile.d/conda.sh
                            conda activate proc-chain
                            conda deactivate
                            rm miniconda.sh'''
                    }
                    post {
                        failure {
                            echo 'Cleaning up workspace'
                            deleteDir()
                        }
                    }
                }
                stage('get data') {
                    steps {
                        script {
                            BuildBadge.setStatus('running')
                        }
                        sh './get_data.sh'
                    }
                    post {
                        failure {
                            echo 'Cleaning up workspace'
                            deleteDir()
                        }
                    }
                }
                stage('install cosmo-ghg') {
                    steps {
                        script {
                            BuildBadge.setStatus('running')
                        }
                        sh '''module load cray-python
                        source /project/g110/spack/user/daint/spack/share/spack/setup-env.sh
                        spack installcosmo cosmo@empa-ghg%nvhpc cosmo_target=gpu +cppdycore'''
                    }
                    post {
                        failure {
                            echo 'Cleaning up workspace'
                            deleteDir()
                        }
                    }
                }
                stage('create icon binary') {
                    steps {
                        script {
                            BuildBadge.setStatus('running')
                        }
                        sh './jenkins/scripts/create-icon-binary.sh'
                    }
                    post {
                        failure {
                            echo 'Cleaning up workspace'
                            deleteDir()
                        }
                    }
                }
            }
        }
        stage('Testing') {
            environment {
                PATH = "${WORKSPACE}/miniconda/bin:$PATH"
            }
            steps {
                script {
                    TestBadge.setStatus('running')
                }
                sh '''source ${WORKSPACE}/miniconda/etc/profile.d/conda.sh
                conda activate proc-chain
                source /project/g110/spack/user/daint/spack/share/spack/setup-env.sh
                python run_chain.py cosmo-ghg-11km-test 2015-01-01 0 24'''
//              python run_chain.py icon-test 2018-01-01 0 24 -j prepare_data icon'''
            }
            post {
                failure {
                    echo 'Cleaning up workspace'
                    deleteDir()
                    script {
                        TestBadge.setStatus('failing')
                    }
                }
                success {
                    script {
                        TestBadge.setStatus('passing')
                    }
                }
            }
        }
    }
}
